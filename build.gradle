buildscript {
    dependencies {
        classpath "net.uberfoo.gradle:gradle-aspectj:2.2"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "io.freefair.aspectj.post-compile-weaving" version "6.6-rc1"
}

group = 'self.me'
version = '0.1.1'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // AOP
    implementation 'org.springframework:spring-instrument'
    implementation 'org.springframework:spring-aspects'
    implementation 'org.aspectj:aspectjrt:1.9.9.1'
    implementation 'org.aspectj:aspectjweaver:1.9.9.1'

    // Database
    implementation 'mysql:mysql-connector-java'
    implementation 'org.flywaydb:flyway-mysql:9.12.0'
    implementation 'org.flywaydb:flyway-core:9.12.0'
    implementation 'com.h2database:h2'

    // Annotations
    implementation 'org.jetbrains:annotations:23.0.0'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    // Lombok
    implementation 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Parsing
    implementation 'com.google.code.gson:gson'
    implementation 'org.jsoup:jsoup:1.15.3'
    implementation 'org.brotli:dec:0.1.2'
    implementation 'javax.activation:activation:1.1.1'

    // Development
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    // Remove to eliminate reflective access warning, per: https://stackoverflow.com/a/61007739/4871490
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Testing
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'unit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
}

bootRun {
    if (project.hasProperty('args')) {
        args = project.args.split(',' as Closure)
    }
    if (project.hasProperty('jvmArgs')) {
        jvmArgs = (project.jvmArgs.split('\\s+' as Closure)) as List
    }
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}
