plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

group = 'self.me'
version = '0.0.1-SNAPSHOT'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:19.0.0'

    // Lombok
    compile group: 'org.jetbrains', name: 'annotations', version: '16.0.2'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Feed parsing
    compile group: 'org.jsoup', name: 'jsoup', version: '1.12.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

	// SpringBoot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-json'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	// MySQL
	implementation 'mysql:mysql-connector-java'

	// Development
	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'com.h2database:h2'
	// Remove to eliminate reflective access warning per:
	// 		https://stackoverflow.com/a/61007739/4871490
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'

	// Testing
	def jupiter_version = "5.6.2"
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntime "org.junit.jupiter:junit-jupiter:$jupiter_version"
	testCompile "org.junit.jupiter:junit-jupiter-params:$jupiter_version"
}

bootRun {
	if (project.hasProperty('args')) {
		args = project.args.split(',' as Closure)
	}
}

test {
	useJUnitPlatform()
}
